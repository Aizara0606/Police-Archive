import java.sql.*;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        try {
            DatabaseHandler dbHandler = new DatabaseHandler();
            UserManager userManager = new UserManager(dbHandler);
            CaseManager caseManager = new CaseManager(dbHandler);

            System.out.println("1. Log in");
            System.out.println("2. Register");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            if (choice == 1) {
                System.out.print("Enter email: ");
                String email = scanner.nextLine();
                System.out.print("Enter password: ");
                String password = scanner.nextLine();

                User user = userManager.authenticateUser(email, password);
                if (user != null) {
                    System.out.println("Welcome, " + user.getName() + "!");

                    if (user instanceof Admin) {
                        adminMenu(scanner, caseManager);
                    } else {
                        userMenu(scanner, caseManager);
                    }
                } else {
                    System.out.println("Authentication failed!");
                }
            } else if (choice == 2) {
                System.out.print("Enter your name: ");
                String name = scanner.nextLine();
                System.out.print("Enter your email: ");
                String email = scanner.nextLine();
                System.out.print("Enter your password: ");
                String password = scanner.nextLine();
                System.out.print("Enter your role (user/admin): ");
                String role = scanner.nextLine().toLowerCase();

                if (!role.equals("admin") && !role.equals("user")) {
                    role = "user";
                }

                boolean success = userManager.registerUser(name, email, password, role);
                System.out.println(success ? "User registered successfully!" : "Registration failed!");
            } else {
                System.out.println("Invalid option.");
            }
            dbHandler.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            scanner.close();
        }
    }

    private static void userMenu(Scanner scanner, CaseManager caseManager) throws SQLException {
        while (true) {
            System.out.println("1. Search for a case by name");
            System.out.println("2. View all cases");
            System.out.println("3. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    searchCase(scanner, caseManager);
                    break;
                case 2:
                    caseManager.viewAllCases();
                    break;
                case 3:
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }

    private static void adminMenu(Scanner scanner, CaseManager caseManager) throws SQLException {
        while (true) {
            System.out.println("1. Add a case");
            System.out.println("2. Delete a case");
            System.out.println("3. Search for a case by name");
            System.out.println("4. Edit a case");
            System.out.println("5. View all cases");
            System.out.println("6. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    addCase(scanner, caseManager);
                    break;
                case 2:
                    deleteCase(scanner, caseManager);
                    break;
                case 3:
                    searchCase(scanner, caseManager);
                    break;
                case 4:
                    editCase(scanner, caseManager);
                    break;
                case 5:
                    caseManager.viewAllCases();
                    break;
                case 6:
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }

    private static void addCase(Scanner scanner, CaseManager caseManager) throws SQLException {
        System.out.print("Enter case name: ");
        String name = scanner.nextLine();

        // ✅ Добавляем проверку для корректного ввода года
        int year = 0;
        while (true) {
            System.out.print("Enter year: ");
            if (scanner.hasNextInt()) {
                year = scanner.nextInt();
                scanner.nextLine(); // Читаем перевод строки
                break;
            } else {
                System.out.println("Invalid input. Please enter a valid year.");
                scanner.nextLine(); // Очищаем ввод
            }
        }

        System.out.print("Enter category: ");
        String category = scanner.nextLine();

        System.out.print("Enter victim name: ");
        String victim = scanner.nextLine();

        System.out.print("Enter archived (true/false): ");
        boolean archived = scanner.nextBoolean();
        scanner.nextLine();

        boolean success = caseManager.addCase(name, year, category, victim, archived);
        System.out.println(success ? "Case added successfully." : "Failed to add case.");
    }


    private static void deleteCase(Scanner scanner, CaseManager caseManager) throws SQLException {
        System.out.print("Enter case ID to delete: ");
        int caseId = scanner.nextInt();
        scanner.nextLine();

        boolean success = caseManager.deleteCase(caseId);
        System.out.println(success ? "Case deleted successfully." : "Failed to delete case.");
    }


    private static void searchCase(Scanner scanner, CaseManager caseManager) throws SQLException {
        System.out.print("Enter case name to search: ");
        String name = scanner.nextLine();
        caseManager.searchCaseByName(name);
    }

    private static void editCase(Scanner scanner, CaseManager caseManager) throws SQLException {
        System.out.print("Enter case ID to edit: ");
        int caseId = scanner.nextInt();
        scanner.nextLine();
        System.out.print("Enter new case name: ");
        String newName = scanner.nextLine();
        System.out.print("Enter new category: ");
        String newCategory = scanner.nextLine();
        System.out.print("Enter new victim name: ");
        String newVictim = scanner.nextLine();

        boolean success = caseManager.editCase(caseId, newName, newCategory, newVictim);
        System.out.println(success ? "Case updated successfully." : "Failed to update case.");
    }
}
